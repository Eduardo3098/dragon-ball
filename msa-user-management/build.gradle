plugins {
	id 'java'
	id "jacoco"
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.pichincha.dragon.ball.services'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	mapstructVersion = '1.5.5.Final'
	lombokVersion = '1.18.30'
}

dependencies {
	// JDBC Reactive
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'io.r2dbc:r2dbc-spi'

	implementation 'io.r2dbc:r2dbc-mssql'
	testImplementation 'io.r2dbc:r2dbc-h2'

	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'

	implementation group: "org.mapstruct" , name: "mapstruct" , version: "1.5.3.Final"
	annotationProcessor group: "org.mapstruct" , name: "mapstruct-processor" , version: "1.5.3.Final"

	compileOnly 'org.mapstruct:mapstruct','org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/pichincha/dragon/ball/services/*MsaUserManagementApplication*",
					"com/pichincha/dragon/ball/services/domain/*"
			])
		}))
	}
	reports {
		xml.required = true
		xml.destination file("${buildDir}/jacoco/test.xml")
		html.required = true
		html.destination file("${buildDir}/jacoco/index.html")
		csv.required = true
	}
}
